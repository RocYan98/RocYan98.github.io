import{_ as s,r as e,o as t,c as p,b as n,e as c,d as o,f as l}from"./app-a16777ff.js";const i={},r=l(`<h1 id="广播机制" tabindex="-1"><a class="header-anchor" href="#广播机制" aria-hidden="true">#</a> 广播机制</h1><p>当两个 shape 不同的矩阵进行运算，当满足广播机制的条件时，就会把小的矩阵扩张成相同 shape 的矩阵，然后对两个矩阵相同的位置进行运算</p><h2 id="广播机制的条件" tabindex="-1"><a class="header-anchor" href="#广播机制的条件" aria-hidden="true">#</a> 广播机制的条件</h2><ul><li>两个张量都至少有一个维度，且不是 0 维</li><li>按从右往左看每一个张量的维度，两个维度需要满足以下任一条件： <ol><li>这两个维度的大小相等</li><li>某个维度，一个张量有，一个张量没有</li><li>某个维度，两个张量都有，但有一个是 1</li></ol></li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>x <span class="token operator">=</span> torch<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
y <span class="token operator">=</span> torch<span class="token punctuation">.</span>empty<span class="token punctuation">(</span>   <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>

<span class="token comment"># 对于 x 和 y 从右往左看</span>
<span class="token comment"># 第 4 维满足 a</span>
<span class="token comment"># 第 3 维满足 c</span>
<span class="token comment"># 第 2 维满足 a</span>
<span class="token comment"># 第 1 维满足 b</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="广播的过程" tabindex="-1"><a class="header-anchor" href="#广播的过程" aria-hidden="true">#</a> 广播的过程</h2><ul><li><p>对于条件 a 无需处理</p></li><li><p>对于条件 b，先将其变为条件 c</p></li><li><p>对于条件 c，将两个维度变为相等</p></li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 广播后</span>
x <span class="token operator">=</span> torch<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
y <span class="token operator">=</span> torch<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,9),u={href:"https://www.syrr.cn/news/40121.html?action=onClick",target:"_blank",rel:"noopener noreferrer"};function d(m,k){const a=e("ExternalLinkIcon");return t(),p("div",null,[r,n("p",null,[n("a",u,[c("Pytorch/Numpy中的广播机制（Broadcast）"),o(a)])])])}const b=s(i,[["render",d],["__file","broadcast.html.vue"]]);export{b as default};
