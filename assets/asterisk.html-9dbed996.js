import{_ as e,r as o,o as c,c as r,b as n,e as s,d as t,f as p}from"./app-e4503771.js";const u={},l=p(`<h1 id="参数中的星号" tabindex="-1"><a class="header-anchor" href="#参数中的星号" aria-hidden="true">#</a> 参数中的星号</h1><h2 id="_1-参数中的-args-和-kwargs" tabindex="-1"><a class="header-anchor" href="#_1-参数中的-args-和-kwargs" aria-hidden="true">#</a> 1 参数中的 *args 和 **kwargs</h2><p>在了解 *args 和 **kwargs 的作用之前，首先要理解 * 和 ** 在 Python 中的使用。* 和 ** 主要有三方面的用途：</p><ol><li>对可迭代对象进行拆分</li><li>可变变量的赋值</li><li>函数的可选参数标志</li></ol><h3 id="_1-1-对可迭代对象进行拆分" tabindex="-1"><a class="header-anchor" href="#_1-1-对可迭代对象进行拆分" aria-hidden="true">#</a> 1.1 对可迭代对象进行拆分</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 1 2 3</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">{</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment"># a b c 拆解字典时只拆解key</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token operator">**</span><span class="token punctuation">{</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment"># {&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3}对key和value都进行了拆解</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以对于 *args 和 **kwargs，args 就是可迭代对象，而 kwargs 就是字典</p><h3 id="_1-2-可变变量的赋值" tabindex="-1"><a class="header-anchor" href="#_1-2-可变变量的赋值" aria-hidden="true">#</a> 1.2 可变变量的赋值</h3><p>对于一个可迭代对象 l，如果想把第一个元素赋值给变量 a，最后一个元素赋值给 c，而把剩下的元素统统赋值给变量 b，第一想法可能是用切片，这样需要写三行代码，太麻烦，并且对 unsubscriptable 的对象是不适用的（比如集合），所以用 * 可以解决这个问题。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a<span class="token punctuation">,</span> <span class="token operator">*</span>b<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span>
<span class="token comment">#a = 1, b = [2, 3, 4, 5], c = 6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-函数的可选参数标志" tabindex="-1"><a class="header-anchor" href="#_1-3-函数的可选参数标志" aria-hidden="true">#</a> 1.3 函数的可选参数标志</h3><p>理解了前面两点后，这一点就是把前两点给结合起来运用。如果是单星号 * 标记的就是可选的位置参数（positional arguments），如果是双星号 ** 标记的就是可选的关键词参数（keyword arguments）</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> args<span class="token punctuation">,</span> kwargs<span class="token punctuation">)</span>
    
function<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> d<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment"># 输出1 (2, 3) {&#39;c&#39;: 4, &#39;d&#39;: 5}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-参数中的-和" tabindex="-1"><a class="header-anchor" href="#_2-参数中的-和" aria-hidden="true">#</a> 2 参数中的 / 和 *</h2><p>先要搞清楚<strong>必选参数</strong>，<strong>默认参数</strong>，<strong>可变长度的位置参数</strong>，<strong>可变长度的关键字参数</strong>，<strong>位置参数</strong>和<strong>关键字参数</strong>分别表示的是什么</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
	<span class="token keyword">pass</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面这个例子中，a，b，c 是<strong>必选参数</strong>，d 是<strong>默认参数</strong>，args 和 kwargs 分别是<strong>可变长度的位置参数</strong>和<strong>可变长度的关键字参数</strong>，有了第一节的讲解这个应该很容易理解。当然也可以改变<strong>默认参数</strong>的值，比如<code>function(1, 2, 3, d=5)</code>那么此时 d 的值就是 5 而不再是 4。</p>`,17),i={href:"https://zhuanlan.zhihu.com/p/479358658",target:"_blank",rel:"noopener noreferrer"},k={href:"https://peps.python.org/pep-3102/",target:"_blank",rel:"noopener noreferrer"},d=p(`<p><strong>位置参数</strong>和<strong>关键字参数</strong>是函数调用时候的概念，而上面四种参数是函数定义时候的概念。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span>
    
function<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> d<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment"># 输出 1 2 3 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时 1 和 2 是<strong>位置参数</strong>，3 和 5 是<strong>关键字参数</strong>，<strong>默认参数</strong>不一定是<strong>关键字参数</strong>，比如<code>function(0, 1, 2, 3)</code>此时就是通过<strong>位置参数</strong>的方式传递给 d。</p><p>Python 规定<strong>位置参数</strong>在左，<strong>关键字参数</strong>在右，比如<code>function(1, b=2, 3)</code>这就会报错，<strong>位置参数</strong>必须严格在<strong>关键字参数</strong>的左边。</p><p>Python3.8 之后函数参数中允许出现 / 和 * 号，/ 用来指明某些函数形参必须使用<strong>位置参数</strong>的形式，对于单独出现在参数中的 * 参数，则表示，* 后面的参数必须为<strong>关键字参数</strong>的形式，比如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">/</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">)</span>
	<span class="token keyword">pass</span>

function<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> d<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> e<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>
function<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> d<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> e<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>a 和 b 只能用<strong>位置参数</strong>的形式，c 既可以用<strong>位置参数</strong>的形式又可以用<strong>关键字参数</strong>的形式，d 和 e 只能用<strong>关键字参数</strong>的形式。</p><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,8),g={href:"https://zhuanlan.zhihu.com/p/479358658",target:"_blank",rel:"noopener noreferrer"},m={href:"https://peps.python.org/pep-3102/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://www.zhihu.com/question/287097169/answer/453193254",target:"_blank",rel:"noopener noreferrer"};function h(v,f){const a=o("ExternalLinkIcon");return c(),r("div",null,[l,n("p",null,[s("args 和 kwargs 我个人觉得还是尽量少用，如果函数中有这两个参数，那么必须通过调用才知道传进来的是什么内容，并且同时有这4种参数时，顺序规则比较复杂（想要了Python中默认的函数参数顺序的可以参考"),n("a",i,[s("知乎上这篇文章的第五节内容"),t(a)]),s("或"),n("a",k,[s("PEP 3102 – Keyword-Only Arguments"),t(a)]),s("），因此接下来就不再考虑这两个参数。")]),d,n("p",null,[n("a",g,[s("【Python】函数中的*args和**kwargs是个什么东西？"),t(a)])]),n("p",null,[n("a",m,[s("PEP 3102 – Keyword-Only Arguments"),t(a)])]),n("p",null,[n("a",b,[s("python函数参数中的/和*是什么意思？ - 星晚的回答 - 知乎"),t(a)])])])}const _=e(u,[["render",h],["__file","asterisk.html.vue"]]);export{_ as default};
