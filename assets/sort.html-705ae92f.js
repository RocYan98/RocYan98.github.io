const n=JSON.parse(`{"key":"v-71729acc","path":"/posts/PAT/sort.html","title":"PAT 排序算法","lang":"zh-CN","frontmatter":{"date":"2023-08-03T00:00:00.000Z","tag":["PAT","Algorithm"],"category":"PAT","order":3,"description":"PAT 排序算法 PAT甲级题目整理 交换排序 冒泡排序 void bubble_sort() { for (int i = 1; i &lt; n; ++i) { \\tbool did_swap = false; for (int j = 0; j &lt; n - i; ++j) { \\tif (a[j] &gt; a[j + 1]) { \\tswap(a[j], a[j+1]); \\tdid_swap = true; \\t} } if (!did_swap) return; } }","head":[["meta",{"property":"og:url","content":"https://rocyan.top/posts/PAT/sort.html"}],["meta",{"property":"og:site_name","content":"Roc Yan's Blog"}],["meta",{"property":"og:title","content":"PAT 排序算法"}],["meta",{"property":"og:description","content":"PAT 排序算法 PAT甲级题目整理 交换排序 冒泡排序 void bubble_sort() { for (int i = 1; i &lt; n; ++i) { \\tbool did_swap = false; for (int j = 0; j &lt; n - i; ++j) { \\tif (a[j] &gt; a[j + 1]) { \\tswap(a[j], a[j+1]); \\tdid_swap = true; \\t} } if (!did_swap) return; } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-08-15T08:25:48.000Z"}],["meta",{"property":"article:author","content":"Roc Yan"}],["meta",{"property":"article:tag","content":"PAT"}],["meta",{"property":"article:tag","content":"Algorithm"}],["meta",{"property":"article:published_time","content":"2023-08-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-08-15T08:25:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"PAT 排序算法\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-08-03T00:00:00.000Z\\",\\"dateModified\\":\\"2023-08-15T08:25:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Roc Yan\\",\\"url\\":\\"https://rocyan.top\\",\\"email\\":\\"qpyan23@m.fudan.edu.cn\\"}]}"]]},"headers":[{"level":2,"title":"PAT甲级题目整理","slug":"pat甲级题目整理","link":"#pat甲级题目整理","children":[]},{"level":2,"title":"交换排序","slug":"交换排序","link":"#交换排序","children":[{"level":3,"title":"冒泡排序","slug":"冒泡排序","link":"#冒泡排序","children":[]},{"level":3,"title":"快速排序","slug":"快速排序","link":"#快速排序","children":[]}]},{"level":2,"title":"选择排序","slug":"选择排序","link":"#选择排序","children":[{"level":3,"title":"直接选择排序","slug":"直接选择排序","link":"#直接选择排序","children":[]},{"level":3,"title":"堆排序","slug":"堆排序","link":"#堆排序","children":[]}]},{"level":2,"title":"插入排序","slug":"插入排序","link":"#插入排序","children":[{"level":3,"title":"直接插入排序","slug":"直接插入排序","link":"#直接插入排序","children":[]},{"level":3,"title":"希尔排序","slug":"希尔排序","link":"#希尔排序","children":[]}]},{"level":2,"title":"归并排序","slug":"归并排序","link":"#归并排序","children":[]},{"level":2,"title":"基数排序（不是基于比较的排序）","slug":"基数排序-不是基于比较的排序","link":"#基数排序-不是基于比较的排序","children":[]},{"level":2,"title":"拓扑排序","slug":"拓扑排序","link":"#拓扑排序","children":[]}],"git":{"createdTime":1691819321000,"updatedTime":1692087948000,"contributors":[{"name":"Yan","email":"rocyan98@gmail.com","commits":6}]},"readingTime":{"minutes":1.83,"words":550},"filePathRelative":"posts/PAT/sort.md","localizedDate":"2023年8月3日","excerpt":"<h1> PAT 排序算法</h1>\\n<h2> <a href=\\"https://github.com/RocYan98/PAT\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">PAT甲级题目整理</a></h2>\\n<h2> 交换排序</h2>\\n<h3> 冒泡排序</h3>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token keyword\\">void</span> <span class=\\"token function\\">bubble_sort</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> n<span class=\\"token punctuation\\">;</span> <span class=\\"token operator\\">++</span>i<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    \\t<span class=\\"token keyword\\">bool</span> did_swap <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> j <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> j <span class=\\"token operator\\">&lt;</span> n <span class=\\"token operator\\">-</span> i<span class=\\"token punctuation\\">;</span> <span class=\\"token operator\\">++</span>j<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        \\t<span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">[</span>j<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">&gt;</span> a<span class=\\"token punctuation\\">[</span>j <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            \\t<span class=\\"token function\\">swap</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">[</span>j<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> a<span class=\\"token punctuation\\">[</span>j<span class=\\"token operator\\">+</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            \\tdid_swap <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">;</span>\\n        \\t<span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>did_swap<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">return</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
