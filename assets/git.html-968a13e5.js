import{_ as s,o as i,c as e,f as a,b as n}from"./app-3d2110e9.js";const l={},t=a(`<h1 id="git-github" tabindex="-1"><a class="header-anchor" href="#git-github" aria-hidden="true">#</a> Git&amp;GitHub</h1><h2 id="一、git结构" tabindex="-1"><a class="header-anchor" href="#一、git结构" aria-hidden="true">#</a> 一、Git结构</h2><figure><img src="http://rocyan.oss-cn-hangzhou.aliyuncs.com/notes/yujcn.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="http://rocyan.oss-cn-hangzhou.aliyuncs.com/notes/40lf4.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="http://rocyan.oss-cn-hangzhou.aliyuncs.com/notes/ub1qk.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>Workspace：工作区</li><li>Index / Stage：暂存区</li><li>Repository：仓库区（或本地库）</li><li>Remote：远程仓库</li></ul><h2 id="二、git-命令行操作" tabindex="-1"><a class="header-anchor" href="#二、git-命令行操作" aria-hidden="true">#</a> 二、Git 命令行操作</h2><h3 id="_2-1-本地库初始化" tabindex="-1"><a class="header-anchor" href="#_2-1-本地库初始化" aria-hidden="true">#</a> 2.1 本地库初始化</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>效果：初始化本地库，在目录中创建一个.git文件</p><p>注意: <em>.git目录中存放的是本地库相关的子目录和文件，不要删除，也不用轻易修改</em></p><h3 id="_2-2-设置签名" tabindex="-1"><a class="header-anchor" href="#_2-2-设置签名" aria-hidden="true">#</a> 2.2 设置签名</h3><ul><li><p>形式：</p><ul><li>name：Yan</li><li>email：rocyan98@gmail.com</li></ul></li><li><p>作用： 区分不同开发人员的身份</p></li><li><p>注意：<em>这里设置的签名和登陆远程仓库（github）的账号密码没有关系</em></p></li><li><p>命令：</p></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 项目级别/仓库级别：仅在当前本地仓库范围内有效</span>
<span class="token function">git</span> config user.name Yan
<span class="token function">git</span> config user.email rocyan98@gmail.com
<span class="token comment"># 信息保存的位置 ./.git/config 文件中</span>

<span class="token comment"># 系统用户级别：登陆当前操作系统的用户范围</span>
<span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name Yan
<span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email rocyan98@gmail.com
<span class="token comment"># 信息保存的位置：~/.gitconfi文件</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="http://rocyan.oss-cn-hangzhou.aliyuncs.com/notes/frpza.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看当前Git配置信息</span>
<span class="token function">git</span> config <span class="token parameter variable">--list</span> / <span class="token function">git</span> config <span class="token parameter variable">-l</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 编辑Git配置文件</span>
<span class="token function">git</span> config <span class="token parameter variable">-e</span> <span class="token punctuation">[</span>--global<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>​</p><ul><li><p>级别优先级：</p><ul><li>就近原则：项目级别优先于系统用户级别，二者都有时，采用项目级别的签名</li><li>不允许没有签名</li></ul></li></ul><h3 id="_2-3-基本操作" tabindex="-1"><a class="header-anchor" href="#_2-3-基本操作" aria-hidden="true">#</a> 2.3 基本操作</h3><h4 id="_2-3-1-状态查看" tabindex="-1"><a class="header-anchor" href="#_2-3-1-状态查看" aria-hidden="true">#</a> 2.3.1 状态查看</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看工作区、暂存区状态</span>
<span class="token function">git</span> status
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>共有三种状态：</p><ul><li><strong>Untracked files <em>红色</em></strong> 未追踪的文件，工作区新建文件，但是没有提交到暂存区 <ul><li><img src="http://rocyan.oss-cn-hangzhou.aliyuncs.com/notes/ew98s.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></li></ul></li><li><strong>Changes not staged for commit <em>红色</em></strong> 工作区内的文件有更新，但是没有提交到暂存区 <ul><li><img src="http://rocyan.oss-cn-hangzhou.aliyuncs.com/notes/lwsky.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></li></ul></li><li><strong>Changes to be committed <em>绿色</em></strong> 改变的内容提交到暂存区 <ul><li><img src="http://rocyan.oss-cn-hangzhou.aliyuncs.com/notes/7c8td.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></li></ul></li><li><strong>working tree clean</strong> 暂存区的内容都已经提交到本地库 <ul><li><img src="http://rocyan.oss-cn-hangzhou.aliyuncs.com/notes/sv78d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></li></ul></li></ul></li></ul><h4 id="_2-3-2-添加-删除-恢复文件" tabindex="-1"><a class="header-anchor" href="#_2-3-2-添加-删除-恢复文件" aria-hidden="true">#</a> 2.3.2 添加/删除/恢复文件</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 添加指定文件到暂存区</span>
<span class="token function">git</span> <span class="token function">add</span> <span class="token punctuation">[</span>file1<span class="token punctuation">]</span> <span class="token punctuation">[</span>file2<span class="token punctuation">]</span> <span class="token punctuation">..</span>. 

<span class="token comment"># 添加指定目录到暂存区，包括子目录</span>
<span class="token function">git</span> <span class="token function">add</span> <span class="token punctuation">[</span>dir<span class="token punctuation">]</span>

<span class="token comment"># 添加当前目录的所有文件到暂存区</span>
<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>

<span class="token comment"># 添加每个变化前，都会要求确认</span>
<span class="token comment"># 对于同一个文件的多处变化，可以实现分次提交</span>
<span class="token function">git</span> <span class="token function">add</span> <span class="token parameter variable">-p</span>

<span class="token comment"># 删除工作区文件，并且将这次删除放入暂存区</span>
<span class="token function">git</span> <span class="token function">rm</span> <span class="token punctuation">[</span>file1<span class="token punctuation">]</span> <span class="token punctuation">[</span>file2<span class="token punctuation">]</span> <span class="token punctuation">..</span>.

<span class="token comment"># 停止追踪指定文件，但该文件会保留在工作区（配合.gitignore，即删除远程仓库但不删除本地）</span>
<span class="token function">git</span> <span class="token function">rm</span> <span class="token parameter variable">--cached</span> <span class="token punctuation">[</span>file<span class="token punctuation">]</span>

<span class="token comment"># 改名文件，并且将这个改名放入暂存区</span>
<span class="token function">git</span> <span class="token function">mv</span> <span class="token punctuation">[</span>file-original<span class="token punctuation">]</span> <span class="token punctuation">[</span>file-renamed<span class="token punctuation">]</span>

<span class="token comment"># 恢复暂存区的指定文件到工作区</span>
<span class="token function">git</span> checkout <span class="token punctuation">[</span>file<span class="token punctuation">]</span>

<span class="token comment"># 恢复某个 commit 的指定文件到暂存区和工作区</span>
<span class="token function">git</span> checkout <span class="token punctuation">[</span>commit<span class="token punctuation">]</span> <span class="token punctuation">[</span>file<span class="token punctuation">]</span>

<span class="token comment"># 恢复暂存区的所有文件到工作区</span>
<span class="token function">git</span> checkout <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-3-提交" tabindex="-1"><a class="header-anchor" href="#_2-3-3-提交" aria-hidden="true">#</a> 2.3.3 提交</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 提交暂存区到本地库</span>
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token punctuation">[</span>message<span class="token punctuation">]</span>

<span class="token comment"># 提交暂存区的指定文件到本地库</span>
<span class="token function">git</span> commit <span class="token punctuation">[</span>file1<span class="token punctuation">]</span> <span class="token punctuation">[</span>file2<span class="token punctuation">]</span> <span class="token punctuation">..</span>. <span class="token parameter variable">-m</span> <span class="token punctuation">[</span>message<span class="token punctuation">]</span>

<span class="token comment"># 提交工作区自上次 commit 之后的变化，直接到本地库</span>
<span class="token function">git</span> commit <span class="token parameter variable">-am</span> <span class="token punctuation">[</span>message<span class="token punctuation">]</span>

<span class="token comment"># 提交时显示所有 diff 信息</span>
<span class="token function">git</span> commit <span class="token parameter variable">-v</span>

<span class="token comment"># 使用一次新的 commit，替代上一次提交</span>
<span class="token comment"># 如果代码没有任何新变化，则用来改写上一次 commit 的提交信息</span>
<span class="token function">git</span> commit <span class="token parameter variable">--amend</span> <span class="token parameter variable">-m</span> <span class="token punctuation">[</span>message<span class="token punctuation">]</span>

<span class="token comment"># 重做上一次 commit，并包括指定文件的新变化</span>
<span class="token function">git</span> commit <span class="token parameter variable">--amend</span> <span class="token punctuation">[</span>file1<span class="token punctuation">]</span> <span class="token punctuation">[</span>file2<span class="token punctuation">]</span> <span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-4-查看历史记录" tabindex="-1"><a class="header-anchor" href="#_2-3-4-查看历史记录" aria-hidden="true">#</a> 2.3.4 查看历史记录</h4><ul><li>方法一：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><figure><img src="http://rocyan.oss-cn-hangzhou.aliyuncs.com/notes/tn1ih.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>多屏显示控制方式：空格向下翻页、b 向上翻页、 q 退出</li></ul></li><li><p>方法二：</p></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> log <span class="token parameter variable">--pretty</span><span class="token operator">=</span>oneline
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><figure><img src="http://rocyan.oss-cn-hangzhou.aliyuncs.com/notes/wjcmr.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>方法三：</p></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> log <span class="token parameter variable">--oneline</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><figure><img src="http://rocyan.oss-cn-hangzhou.aliyuncs.com/notes/3b3l8.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>方法四：</p></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> reflog
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,36),c=n("ul",null,[n("li",null,[n("figure",null,[n("img",{src:"http://rocyan.oss-cn-hangzhou.aliyuncs.com/notes/ghlhi.png",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")]),n("ul",null,[n("li",{移动到当前版本需要多少步:""},"HEAD@")])])],-1),o=a(`<h4 id="_2-3-5-版本前进后退" tabindex="-1"><a class="header-anchor" href="#_2-3-5-版本前进后退" aria-hidden="true">#</a> 2.3.5 版本前进后退</h4><ul><li>基于索引值操作（<strong>推荐</strong>）</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> reset <span class="token parameter variable">--hard</span> <span class="token punctuation">[</span>局部索引值<span class="token punctuation">]</span>
<span class="token function">git</span> reset <span class="token parameter variable">--hard</span> f73f651
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用^符号（<strong>只能后退</strong>）</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> reset <span class="token parameter variable">--hard</span> HEAD^
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>注意：<em>一个 ^ 表示后退一步，n 个 ^ 表示后退 n 步</em></p></li><li><p>使用 ~ 符号（<strong>只能后退</strong>）</p></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> reset <span class="token parameter variable">--hard</span> HEAD~n
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>注意：<em>表示后退 n 步</em></li></ul><h4 id="_2-3-6-reset-命令的三个参数对比" tabindex="-1"><a class="header-anchor" href="#_2-3-6-reset-命令的三个参数对比" aria-hidden="true">#</a> 2.3.6 reset 命令的三个参数对比：</h4><ul><li>--soft 参数（<em>status 为绿色</em>） <ul><li>仅在本地库移动 HEAD 指针</li><li><img src="http://rocyan.oss-cn-hangzhou.aliyuncs.com/notes/daa3v.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></li></ul></li><li>--mixed 参数（<em>status 为红色</em>） <ul><li>在本地库移动 HEAD 指针</li><li>重置暂存区</li><li><img src="http://rocyan.oss-cn-hangzhou.aliyuncs.com/notes/4oe42.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></li></ul></li><li>--hard 参数（<em>整体回退</em>，status 为 working tree clean） <ul><li>在本地库移动HEAD指针</li><li>重置暂存区</li><li>重置工作区</li></ul></li></ul><h4 id="_2-3-7-比较文件差异" tabindex="-1"><a class="header-anchor" href="#_2-3-7-比较文件差异" aria-hidden="true">#</a> 2.3.7 比较文件差异:</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 显示暂存区和工作区的差异</span>
<span class="token function">git</span> <span class="token function">diff</span> <span class="token punctuation">[</span>file<span class="token punctuation">]</span>

<span class="token comment"># 显示暂存区和上一个 commit 的差异</span>
<span class="token function">git</span> <span class="token function">diff</span> <span class="token parameter variable">--cached</span> <span class="token punctuation">[</span>file<span class="token punctuation">]</span>

<span class="token comment"># 显示工作区中的文件和本地库历史记录的差异</span>
<span class="token function">git</span> <span class="token function">diff</span> <span class="token punctuation">[</span>本地库中历史版本<span class="token punctuation">]</span> <span class="token punctuation">[</span>file<span class="token punctuation">]</span>

<span class="token comment"># 显示工作区与当前分支最新 commit 之间的差异</span>
<span class="token function">git</span> <span class="token function">diff</span> HEAD

<span class="token comment"># 显示两次提交之间的差异</span>
<span class="token function">git</span> <span class="token function">diff</span> <span class="token punctuation">[</span>first-branch<span class="token punctuation">]</span><span class="token punctuation">..</span>.<span class="token punctuation">[</span>second-branch<span class="token punctuation">]</span>

<span class="token comment"># 显示今天你写了多少行代码</span>
<span class="token function">git</span> <span class="token function">diff</span> <span class="token parameter variable">--shortstat</span> <span class="token string">&quot;@{0 day ago}&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-分支管理" tabindex="-1"><a class="header-anchor" href="#_2-4-分支管理" aria-hidden="true">#</a> 2.4 分支管理</h3><figure><img src="http://rocyan.oss-cn-hangzhou.aliyuncs.com/notes/uf2bx.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_2-4-1-分支操作" tabindex="-1"><a class="header-anchor" href="#_2-4-1-分支操作" aria-hidden="true">#</a> 2.4.1 分支操作</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 列出所有本地分支</span>
<span class="token function">git</span> branch

<span class="token comment"># 列出所有远程分支</span>
<span class="token function">git</span> branch <span class="token parameter variable">-r</span>

<span class="token comment"># 列出所有本地分支和远程分支</span>
<span class="token function">git</span> branch <span class="token parameter variable">-a</span>

<span class="token comment"># 新建一个分支，但依然停留在当前分支</span>
<span class="token function">git</span> branch <span class="token punctuation">[</span>branch-name<span class="token punctuation">]</span>

<span class="token comment"># 新建一个分支，并切换到该分支</span>
<span class="token function">git</span> checkout <span class="token parameter variable">-b</span> <span class="token punctuation">[</span>branch<span class="token punctuation">]</span>

<span class="token comment"># 新建一个分支，指向指定 commit</span>
<span class="token function">git</span> branch <span class="token punctuation">[</span>branch<span class="token punctuation">]</span> <span class="token punctuation">[</span>commit<span class="token punctuation">]</span>

<span class="token comment"># 新建一个分支，与指定的远程分支建立追踪关系</span>
<span class="token function">git</span> branch <span class="token parameter variable">--track</span> <span class="token punctuation">[</span>branch<span class="token punctuation">]</span> <span class="token punctuation">[</span>remote-branch<span class="token punctuation">]</span>

<span class="token comment"># 在现有分支与指定的远程分支之间建立追踪关系</span>
<span class="token function">git</span> branch --set-upstream <span class="token punctuation">[</span>branch<span class="token punctuation">]</span> <span class="token punctuation">[</span>remote-branch<span class="token punctuation">]</span>

<span class="token comment"># 查看本地分支与远程分支的追踪关系</span>
<span class="token function">git</span> branch <span class="token parameter variable">-vv</span>

<span class="token comment"># 切换到指定分支，并更新工作区</span>
<span class="token function">git</span> checkout <span class="token punctuation">[</span>branch-name<span class="token punctuation">]</span>

<span class="token comment"># 切换到上一个分支</span>
<span class="token function">git</span> checkout -

<span class="token comment"># 合并指定分支到当前分支</span>
<span class="token function">git</span> merge <span class="token punctuation">[</span>branch<span class="token punctuation">]</span>

<span class="token comment"># 选择一个 commit，合并进当前分支</span>
<span class="token function">git</span> cherry-pick <span class="token punctuation">[</span>commit<span class="token punctuation">]</span>

<span class="token comment"># 删除分支</span>
<span class="token function">git</span> branch <span class="token parameter variable">-d</span> <span class="token punctuation">[</span>branch-name<span class="token punctuation">]</span>

<span class="token comment"># 删除远程分支</span>
<span class="token function">git</span> push origin <span class="token parameter variable">--delete</span> <span class="token punctuation">[</span>branch-name<span class="token punctuation">]</span>
<span class="token function">git</span> branch <span class="token parameter variable">-dr</span> <span class="token punctuation">[</span>remote/branch<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-4-2-冲突" tabindex="-1"><a class="header-anchor" href="#_2-4-2-冲突" aria-hidden="true">#</a> 2.4.2 冲突</h4><ul><li><figure><img src="http://rocyan.oss-cn-hangzhou.aliyuncs.com/notes/njeji.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>解决冲突：</p><ul><li><p>第一步：编辑文件，删除特殊符号</p></li><li><p>第二步：把文件修改到满意的程度，保存并退出</p></li><li><p>第三步：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">add</span> <span class="token punctuation">[</span>file<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>第四步（<em>此时commit一定不能带具体文件名</em>）：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token punctuation">[</span>message<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li></ul><h2 id="三、-gitignore-文件" tabindex="-1"><a class="header-anchor" href="#三、-gitignore-文件" aria-hidden="true">#</a> 三、.gitignore 文件</h2><p><strong>.gitignore 文件是用来忽视提交到 Github 上的文件和文件夹的，除了忽略掉文件夹，还有其他用法：</strong></p><ul><li>##注释##：注释</li><li>/文件夹/ ：过滤文件夹</li><li>*.xml ：过滤某类型的文件</li><li>/mtk/do.c：指定过滤具体文件</li><li>!开头表示不过滤</li><li>*.[oa] 支持通配符：过滤repo中所有以.o或者.a为扩展名的文件</li></ul><h2 id="四、git-基本原理" tabindex="-1"><a class="header-anchor" href="#四、git-基本原理" aria-hidden="true">#</a> 四、Git 基本原理</h2><h3 id="_4-1-简介哈希" tabindex="-1"><a class="header-anchor" href="#_4-1-简介哈希" aria-hidden="true">#</a> 4.1 简介哈希</h3><ul><li><img src="http://rocyan.oss-cn-hangzhou.aliyuncs.com/notes/ovwt8.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></li><li>哈希是一个系列的加密算法，各个不同的哈希算法虽然加密强度不同，但是有以下几个共同点： <ol><li>不管输入数据的数据量有多大，输入同一个哈希算法，得到的加密结果长度固定。</li><li>哈希算法确定，输入数据确定，输出数据能够保证不变</li><li>哈希算法确定，输入数据有变化，输出数据一定有变化，而且通常变化很大</li><li>哈希算法不可逆</li></ol></li><li>Git 底层采用的是 SHA-1 算法。</li><li>哈希算法可以被用来验证下载的文件的完整性（<em>Git 就是靠这种机制来从根本上保证数据完整性的</em>）：</li><li><img src="http://rocyan.oss-cn-hangzhou.aliyuncs.com/notes/10q98.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></li></ul><h3 id="_4-2-git-保存版本的机制" tabindex="-1"><a class="header-anchor" href="#_4-2-git-保存版本的机制" aria-hidden="true">#</a> 4.2 Git 保存版本的机制</h3><h4 id="_4-2-1-集中式版本公知工具的文件管理机制" tabindex="-1"><a class="header-anchor" href="#_4-2-1-集中式版本公知工具的文件管理机制" aria-hidden="true">#</a> 4.2.1 集中式版本公知工具的文件管理机制</h4><ul><li><p>以文件变更列表的方式存储信息。这类系统将它们保存的信息看作是一组基本</p><p>文件和每个文件随时间逐步累积的差异。</p></li><li><figure><img src="http://rocyan.oss-cn-hangzhou.aliyuncs.com/notes/2gq11.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ul><h4 id="_4-2-2-git-的文件管理机制" tabindex="-1"><a class="header-anchor" href="#_4-2-2-git-的文件管理机制" aria-hidden="true">#</a> 4.2.2 Git 的文件管理机制</h4><ul><li><p>Git 把数据看作是小型文件系统的一组快照。每次提交更新时 Git 都会对当前</p><p>的全部文件制作一个快照并保存这个快照的索引。为了高效，如果文件没有修改， Git 不再重新存储该文件，而是只保留一个链接指向之前存储的文件。所以 Git 的 工作方式可以称之为快照流。</p></li><li><figure><img src="http://rocyan.oss-cn-hangzhou.aliyuncs.com/notes/uk4jl.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ul><h4 id="_4-2-3-git-文件管理机制细节" tabindex="-1"><a class="header-anchor" href="#_4-2-3-git-文件管理机制细节" aria-hidden="true">#</a> 4.2.3 Git 文件管理机制细节</h4><ul><li><p>Git 的“提交对象”</p></li><li><figure><img src="http://rocyan.oss-cn-hangzhou.aliyuncs.com/notes/lyxkn.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>提交对象及其父对象形成的链条</p></li><li><figure><img src="http://rocyan.oss-cn-hangzhou.aliyuncs.com/notes/374al.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ul><h3 id="_4-3-git-分支管理机制" tabindex="-1"><a class="header-anchor" href="#_4-3-git-分支管理机制" aria-hidden="true">#</a> 4.3 Git 分支管理机制</h3><h4 id="_4-3-1-分支的创建" tabindex="-1"><a class="header-anchor" href="#_4-3-1-分支的创建" aria-hidden="true">#</a> 4.3.1 分支的创建</h4><figure><img src="http://rocyan.oss-cn-hangzhou.aliyuncs.com/notes/vs6jz.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_4-3-2-分支的切换" tabindex="-1"><a class="header-anchor" href="#_4-3-2-分支的切换" aria-hidden="true">#</a> 4.3.2 分支的切换</h4><figure><img src="http://rocyan.oss-cn-hangzhou.aliyuncs.com/notes/ewf5o.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="http://rocyan.oss-cn-hangzhou.aliyuncs.com/notes/hctng.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="http://rocyan.oss-cn-hangzhou.aliyuncs.com/notes/18q5n.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="http://rocyan.oss-cn-hangzhou.aliyuncs.com/notes/fqmx7.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="五、github" tabindex="-1"><a class="header-anchor" href="#五、github" aria-hidden="true">#</a> 五、GitHub</h2><ul><li>远程同步</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看当前所有远程地址别名</span>
<span class="token function">git</span> remote <span class="token parameter variable">-v</span>

<span class="token comment"># 增加一个新的远程仓库，并命名</span>
<span class="token function">git</span> remote <span class="token function">add</span> <span class="token punctuation">[</span>alias<span class="token punctuation">]</span> <span class="token punctuation">[</span>url<span class="token punctuation">]</span>

<span class="token comment"># 删除远程仓库</span>
<span class="token function">git</span> remote <span class="token function">rm</span> <span class="token punctuation">[</span>alias<span class="token punctuation">]</span>

<span class="token comment"># 显示某个远程仓库的信息</span>
<span class="token function">git</span> remote show <span class="token punctuation">[</span>remote<span class="token punctuation">]</span>

<span class="token comment"># 完整的把远程库下载到本地</span>
<span class="token comment"># 创建 origin 远程地址别名</span>
<span class="token comment"># 初始化本地库</span>
<span class="token function">git</span> clone <span class="token punctuation">[</span>url<span class="token punctuation">]</span>

<span class="token comment"># 将本地 master 分支推动到远程 origin 库</span>
<span class="token comment"># -u 表示本地指定分支就和远程主机的同名分支建立追踪关系，下次直接用 git push 代替</span>
<span class="token comment"># -f 表示强制执行（非个人仓库禁止使用）</span>
<span class="token function">git</span> push <span class="token parameter variable">-u</span> <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> <span class="token punctuation">[</span>branch<span class="token punctuation">]</span>
<span class="token function">git</span> push <span class="token parameter variable">-u</span> origin master

<span class="token comment"># 同时指定要将本地分支推送到哪一个远程分支</span>
<span class="token comment"># 如果没有指定远程分支，则 push 当前分支到当前分支的追踪关系分支</span>
<span class="token function">git</span> push <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> <span class="token punctuation">[</span>local branch<span class="token punctuation">]</span>:<span class="token punctuation">[</span>remote branch<span class="token punctuation">]</span>

<span class="token comment"># 下载远程仓库的所有变动</span>
<span class="token function">git</span> fetch <span class="token punctuation">[</span>远程地址别名<span class="token punctuation">]</span> <span class="token punctuation">[</span>远程分支名<span class="token punctuation">]</span>

<span class="token comment"># 把下载的远程库的分支合并到当前分支</span>
<span class="token function">git</span> merge <span class="token punctuation">[</span>远程地址别名/远程分支名<span class="token punctuation">]</span>

<span class="token comment"># 取回远程仓库的变化，并与本地分支合并</span>
<span class="token comment"># pull = fetch + merge</span>
<span class="token function">git</span> pull <span class="token punctuation">[</span>远程地址别名<span class="token punctuation">]</span> <span class="token punctuation">[</span>远程分支名<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="六、git工作流" tabindex="-1"><a class="header-anchor" href="#六、git工作流" aria-hidden="true">#</a> 六、Git工作流</h2><h3 id="_6-1-概念" tabindex="-1"><a class="header-anchor" href="#_6-1-概念" aria-hidden="true">#</a> 6.1 概念</h3><ul><li>在项目开发过程中使用 Git 的方式</li></ul><h3 id="_6-2-分类" tabindex="-1"><a class="header-anchor" href="#_6-2-分类" aria-hidden="true">#</a> 6.2 分类</h3><h4 id="_6-2-1-集中式工作流" tabindex="-1"><a class="header-anchor" href="#_6-2-1-集中式工作流" aria-hidden="true">#</a> 6.2.1 集中式工作流</h4><ul><li><p>像 SVN 一样，集中式工作流以中央仓库作为项目所有修改的单点实体。所有</p><p>修改都提交到 Master 这个分支上。<em>这种方式与 SVN 的主要区别就是开发人员有本地库。Git 很多特性并没有用到。</em></p></li><li><figure><img src="http://rocyan.oss-cn-hangzhou.aliyuncs.com/notes/fskoj.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ul><h4 id="_6-2-2-gitflow-工作流" tabindex="-1"><a class="header-anchor" href="#_6-2-2-gitflow-工作流" aria-hidden="true">#</a> 6.2.2 GitFlow 工作流</h4><ul><li><p>Gitflow 工作流通过为功能开发、发布准备和维护设立了独立的分支，让发布</p><p>迭代过程更流畅。严格的分支模型也为大型项目提供了一些非常必要的结构。</p></li><li><figure><img src="http://rocyan.oss-cn-hangzhou.aliyuncs.com/notes/d2rsd.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ul><h4 id="_6-2-3-forking-工作流" tabindex="-1"><a class="header-anchor" href="#_6-2-3-forking-工作流" aria-hidden="true">#</a> 6.2.3 Forking 工作流</h4><ul><li><p>Forking 工作流是在 GitFlow 基础上，充分利用了 Git 的 Fork 和 pull request 的</p><p>功能以达到代码审核的目的。更适合安全可靠地管理大团队的开发者，而且能接受 不信任贡献者的提交。</p></li><li><figure><img src="http://rocyan.oss-cn-hangzhou.aliyuncs.com/notes/0fg5x.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ul><h3 id="_6-3-gitflow-工作流详解" tabindex="-1"><a class="header-anchor" href="#_6-3-gitflow-工作流详解" aria-hidden="true">#</a> 6.3 GitFlow 工作流详解</h3><h4 id="_6-3-1-分支种类" tabindex="-1"><a class="header-anchor" href="#_6-3-1-分支种类" aria-hidden="true">#</a> 6.3.1 分支种类</h4><ul><li><p>主干分支 master</p><ul><li>主要负责管理正在运行的生产环境代码。永远保持与正在运行的生产环境 完全一致。</li></ul></li><li><p>开发分支 develop</p><ul><li>主要负责管理正在开发过程中的代码。一般情况下应该是最新的代码。</li></ul></li><li><p>bug修理分支 hotfix</p><ul><li><p>主要负责管理生产环境下出现的紧急修复的代码。 从主干分支分出，修</p><p>理完毕并测试上线后，并回主干分支。并回后，视情况可以删除该分支。</p></li></ul></li><li><p>准生产分支（预发布分支）release</p><ul><li>较大的版本上线前，会从开发分支中分出准生产分支，进行最后阶段的集 成测试。该版本上线后，会合并到主干分支。生产环境运行一段阶段较稳定后 可以视情况删除。</li></ul></li><li><p>功能分支 feature</p><ul><li>为了不影响较短周期的开发工作，一般把中长期开发模块，会从开发分支 中独立出来。 开发完成后会合并到开发分支。</li></ul></li></ul><h4 id="_6-3-2-gitflow-工作举例" tabindex="-1"><a class="header-anchor" href="#_6-3-2-gitflow-工作举例" aria-hidden="true">#</a> 6.3.2 GitFlow 工作举例</h4><figure><img src="http://rocyan.oss-cn-hangzhou.aliyuncs.com/notes/7198a.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,57),p=[t,c,o];function u(d,r){return i(),e("div",null,p)}const g=s(l,[["render",u],["__file","git.html.vue"]]);export{g as default};
