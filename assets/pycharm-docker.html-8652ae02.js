import{_ as n,r as s,o as i,c,b as a,e as o,d as r,f as t}from"./app-7db93d59.js";const p={},l=t(`<h1 id="pycharm-连接远程服务器上的-docker" tabindex="-1"><a class="header-anchor" href="#pycharm-连接远程服务器上的-docker" aria-hidden="true">#</a> PyCharm 连接远程服务器上的 Docker</h1><h2 id="_1-配置远程服务器-docker" tabindex="-1"><a class="header-anchor" href="#_1-配置远程服务器-docker" aria-hidden="true">#</a> 1 配置远程服务器 docker</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-it</span> <span class="token parameter variable">--name</span><span class="token operator">=</span><span class="token string">&quot;cudaroc&quot;</span> <span class="token parameter variable">-v</span> /home/summer2023/Desktop:/workspace/shared <span class="token parameter variable">--gpus</span><span class="token operator">=</span>all  <span class="token parameter variable">-p</span> <span class="token number">9000</span>:22 pytorch/pytorch:2.0.1-cuda11.7-cudnn8-devel
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p><code>-d</code> 以分离（后台）模式运行容器</p></li><li><p><code>-it</code> 交互式 bash 模式</p></li><li><p><code>--name</code> 指定名称</p></li><li><p><code>-v</code> 本地目录:容器目录。挂载主机的本地目录 /home/summer2023/Desktop 到容器目录 /workspace/shared，本地目录的路径必须是绝对路径</p></li><li><p><code>--gpus</code> 要添加到容器中的 GPU 设备</p></li><li><p><code>-p</code> 端口映射（主机:容器）因为要用ssh连接，所以容器的端口一定要是22，主机端口可以随意</p></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> cudaroc <span class="token function">bash</span>
<span class="token function">passwd</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>连接到容器并更改容器的 root 密码</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">apt-get</span> <span class="token function">install</span> openssh-server
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>安装 ssh 服务，在这个过程中可以会遇到 Unable to locate package openssh-server 的报错，一般原因是刚安装的 Ubuntu 后没有更新软件源导致的</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">apt-get</span> update
<span class="token function">apt-get</span> upgrade
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>先执行这两行代码更新软件源后再安装 ssh 服务</p><p>安装好 ssh 服务后打开 /etc/ssh/sshd_config 文件，将以下代码加入到文件中</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>PermitRootLogin <span class="token function">yes</span> <span class="token comment">#允许root用户使用ssh登录</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>启动ssh服务即可</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">service</span> <span class="token function">ssh</span> restart
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>之后通过 root 账号还有 9000 端口就可以连接到 docker</p><h2 id="_2-配置-pycharm-建立连接" tabindex="-1"><a class="header-anchor" href="#_2-配置-pycharm-建立连接" aria-hidden="true">#</a> 2 配置 pycharm 建立连接</h2><p>找到 pycharm 中 Tools-Deployment-Configuration，点击左上角的 + 创建一个 SFTP 连接</p><figure><img src="https://rocyan.oss-cn-hangzhou.aliyuncs.com/blog/202406261225452.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>先通过 9000 端口建立 ssh 连接</p><figure><img src="https://rocyan.oss-cn-hangzhou.aliyuncs.com/blog/202406261225147.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在 Mappings 中设置好本地路径和 docker 容器的路径的映射关系</p><figure><img src="https://rocyan.oss-cn-hangzhou.aliyuncs.com/blog/202406261225117.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_3-设置-pycharm-的-python-解释器" tabindex="-1"><a class="header-anchor" href="#_3-设置-pycharm-的-python-解释器" aria-hidden="true">#</a> 3 设置 pycharm 的 python 解释器</h3><p>在 docker 中通过以下代码先找到解释器的路径</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">which</span> python
<span class="token comment"># 解释器路径为/opt/conda/bin/python</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>找到 Settings 中的解释器页面添加解释器</p><figure><img src="https://rocyan.oss-cn-hangzhou.aliyuncs.com/blog/202406261225967.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>选择 SSH</p><figure><img src="https://rocyan.oss-cn-hangzhou.aliyuncs.com/blog/202406261225711.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>因为之前在 SFTP 中已经配置过 SSH 连接了，所以在 Existing 中可以找到之前的设置，直接选择就行</p><figure><img src="https://rocyan.oss-cn-hangzhou.aliyuncs.com/blog/202406261225032.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Automaticlly upload project files to the server 勾选则会自动同步本地和 docker 中的文件</p><figure><img src="https://rocyan.oss-cn-hangzhou.aliyuncs.com/blog/202406261225983.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>右侧绿色的就是 docker 中的项目内容</p><figure><img src="https://rocyan.oss-cn-hangzhou.aliyuncs.com/blog/202406261225044.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,36),d={href:"https://blog.csdn.net/sinat_28916141/article/details/126637604",target:"_blank",rel:"noopener noreferrer"};function h(u,g){const e=s("ExternalLinkIcon");return i(),c("div",null,[l,a("p",null,[a("a",d,[o("pycharm专业版连接远程docker容器"),r(e)])])])}const b=n(p,[["render",h],["__file","pycharm-docker.html.vue"]]);export{b as default};
