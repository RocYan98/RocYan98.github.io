import{_ as n,o as s,c as a,f as t}from"./app-70588359.js";const p={},e=t(`<h1 id="meshgrid-生成坐标网格" tabindex="-1"><a class="header-anchor" href="#meshgrid-生成坐标网格" aria-hidden="true">#</a> meshgrid 生成坐标网格</h1><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>torch<span class="token punctuation">.</span>meshgrid<span class="token punctuation">(</span><span class="token operator">*</span>tensors<span class="token punctuation">,</span> indexing<span class="token operator">=</span><span class="token string">&#39;ij&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>*tensors：任意数量的一维张量。这些张量定义了网格的每一个维度</p></li><li><p>indexing：网格的索引方式。可以是 &#39;xy&#39; 或 &#39;ij&#39;</p><ul><li><p>&#39;xy&#39;：适合笛卡尔坐标系，其中第一个张量表示 x 轴，第二个张量表示 y 轴</p></li><li><p>&#39;ij&#39;：适合矩阵索引，其中第一个张量表示行索引，第二个张量表示列索引</p></li></ul></li></ul><p>&#39;xy&#39; 和 &#39;ij&#39; 可以分别理解为如下坐标系：</p><figure><img src="https://rocyan.oss-cn-hangzhou.aliyuncs.com/blog/202407231000090.png" alt="indexing" tabindex="0" loading="lazy"><figcaption>indexing</figcaption></figure><h3 id="例子" tabindex="-1"><a class="header-anchor" href="#例子" aria-hidden="true">#</a> 例子</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># indexing=&#39;xy&#39;</span>
grid_x<span class="token punctuation">,</span> grid_y <span class="token operator">=</span> torch<span class="token punctuation">.</span>meshgrid<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> device<span class="token operator">=</span><span class="token string">&#39;cuda&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> torch<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> device<span class="token operator">=</span><span class="token string">&#39;cuda&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> indexing<span class="token operator">=</span><span class="token string">&#39;xy&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># grid_x: tensor([[0., 1., 2.], [0., 1., 2.]])</span>
<span class="token comment"># grid_y: tensor([[0., 0., 0.], [1., 1., 1.]])</span>

<span class="token comment"># indexing=&#39;ij&#39;</span>
grid_x<span class="token punctuation">,</span> grid_y <span class="token operator">=</span> torch<span class="token punctuation">.</span>meshgrid<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> device<span class="token operator">=</span><span class="token string">&#39;cuda&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> torch<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> device<span class="token operator">=</span><span class="token string">&#39;cuda&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> indexing<span class="token operator">=</span><span class="token string">&#39;ij&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># grid_x: tensor([[0., 0., 0.], [1., 1., 1.]])</span>
<span class="token comment"># grid_y: tensor([[0., 1., 2.], [0., 1., 2.]])</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>indexing=&#39;xy&#39; 生成的 grid_x 对应的是 x 轴坐标，grid_y 对应的是 y 轴坐标</li><li>indexing=&#39;ij&#39; 生成的 grid_x 对应的是行索引，grid_y 对应的是列索引</li></ul>`,8),o=[e];function i(c,l){return s(),a("div",null,o)}const r=n(p,[["render",i],["__file","meshgrid.html.vue"]]);export{r as default};
