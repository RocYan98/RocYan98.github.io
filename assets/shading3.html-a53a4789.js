import{_ as t,r as e,o as i,c as m,b as s,e as a,d as r,w as c,f as l}from"./app-af351c52.js";const p={},o=s("h1",{id:"着色-插值、高级纹理映射",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#着色-插值、高级纹理映射","aria-hidden":"true"},"#"),a(" 着色（插值、高级纹理映射）")],-1),g=s("h2",{id:"_1-重心坐标",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_1-重心坐标","aria-hidden":"true"},"#"),a(" 1 重心坐标")],-1),h=s("p",null,"重心坐标是为了做三角形内的插值",-1),u=s("p",null,[a("三角形 ABC（无论是几维）平面内任意一点都可以写成是三个顶点坐标的线性组合，即点 (x, y) 可以用 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",{stretchy:"false"},"("),s("mi",null,"α"),s("mo",{separator:"true"},","),s("mi",null,"β"),s("mo",{separator:"true"},","),s("mi",null,"γ"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"(\\alpha,\\beta,\\gamma)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.0037em"}},"α"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05278em"}},"β"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05556em"}},"γ"),s("span",{class:"mclose"},")")])])]),a(" 表示，"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",{stretchy:"false"},"("),s("mi",null,"α"),s("mo",{separator:"true"},","),s("mi",null,"β"),s("mo",{separator:"true"},","),s("mi",null,"γ"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"(\\alpha,\\beta,\\gamma)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.0037em"}},"α"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05278em"}},"β"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05556em"}},"γ"),s("span",{class:"mclose"},")")])])]),a(" 就是重心坐标，"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"α"),s("mo",null,"+"),s("mi",null,"β"),s("mo",null,"+"),s("mi",null,"γ"),s("mo",null,"="),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"\\alpha +\\beta +\\gamma=1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.0037em"}},"α"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05278em"}},"β"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.625em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05556em"}},"γ"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),a("，且当点在三角形内部时，三个值都是非负的。")],-1),d=s("figure",null,[s("img",{src:"https://rocyan.oss-cn-hangzhou.aliyuncs.com/blog/202406261212537.png",alt:"",tabindex:"0",loading:"lazy"}),s("figcaption")],-1),y=s("p",null,[a("重心坐标的几何定义是通过面积比来计算，易得其重心是 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",{stretchy:"false"},"("),s("mfrac",null,[s("mn",null,"1"),s("mn",null,"3")]),s("mo",{separator:"true"},","),s("mfrac",null,[s("mn",null,"1"),s("mn",null,"3")]),s("mo",{separator:"true"},","),s("mfrac",null,[s("mn",null,"1"),s("mn",null,"3")]),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"(\\frac13,\\frac13,\\frac13)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.1901em","vertical-align":"-0.345em"}}),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8451em"}},[s("span",{style:{top:"-2.655em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"3")])])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.394em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"1")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.345em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})]),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8451em"}},[s("span",{style:{top:"-2.655em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"3")])])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.394em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"1")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.345em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})]),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8451em"}},[s("span",{style:{top:"-2.655em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"3")])])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.394em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"1")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.345em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})]),s("span",{class:"mclose"},")")])])])],-1),f=l('<figure><img src="https://rocyan.oss-cn-hangzhou.aliyuncs.com/blog/202406261212477.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>下图是重心坐标的一般公式</p><figure><img src="https://rocyan.oss-cn-hangzhou.aliyuncs.com/blog/202406261212810.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_1-1-插值" tabindex="-1"><a class="header-anchor" href="#_1-1-插值" aria-hidden="true">#</a> 1.1 插值</h3><ul><li>插值的作用：确定三角形顶点的值，使三角形内部进行平滑过度（数学定义：插值是一种通过已知的、离散的数据点,在范围内推求新数据点的过程或方法。）</li><li>插值的内容：纹理坐标、颜色、法线...</li><li>插值的方法：利用重心坐标进行插值</li></ul><figure><img src="https://rocyan.oss-cn-hangzhou.aliyuncs.com/blog/202406261212581.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>重心坐标不能保证投影后不变，因此三维空间内的属性应该在三维空间内求插值，而不能投影后再做插值，解决办法就是用逆变换或者透视矫正插值。</p><h2 id="_2-纹理映射" tabindex="-1"><a class="header-anchor" href="#_2-纹理映射" aria-hidden="true">#</a> 2 纹理映射</h2><p>可以根据每个像素的重心坐标来计算其纹理坐标，通过纹理坐标获得 texcolor，并将 texcolor 赋值给漫反射系数</p><figure><img src="https://rocyan.oss-cn-hangzhou.aliyuncs.com/blog/202406261212959.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2-1-纹理过小" tabindex="-1"><a class="header-anchor" href="#_2-1-纹理过小" aria-hidden="true">#</a> 2.1 纹理过小</h3><p>双线性插值（Bilinear）是为了解决纹理过小所导致的问题，当纹理过小时，多个 pixel 会映射到同一个 texel 中，那么得到纹理坐标就不是整数，如果采用<strong>简单的四舍五入</strong>，那么附近几个 pixel 都会是相同的 texel，最后的图片会有明显的锯齿。</p><figure><img src="https://rocyan.oss-cn-hangzhou.aliyuncs.com/blog/202406261212378.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>通过最近的 4 个 texel，利用<strong>双线性插值</strong>可以求得该 pixel 对应的插值。具体做法：</p>',14),b=s("p",null,[a("令 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"s"),s("mo",null,"="),s("mfrac",null,[s("mrow",null,[s("mi",null,"C"),s("mi",null,"J")]),s("mrow",null,[s("mi",null,"C"),s("mi",null,"D")])]),s("mo",{separator:"true"},","),s("mi",null,"t"),s("mo",null,"="),s("mfrac",null,[s("mrow",null,[s("mi",null,"C"),s("mi",null,"G")]),s("mrow",null,[s("mi",null,"C"),s("mi",null,"A")])])]),s("annotation",{encoding:"application/x-tex"},"s=\\frac{CJ}{CD},t=\\frac{CG}{CA}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal"},"s"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.2173em","vertical-align":"-0.345em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8723em"}},[s("span",{style:{top:"-2.655em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.07153em"}},"C"),s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.02778em"}},"D")])])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.394em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.07153em"}},"C"),s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.09618em"}},"J")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.345em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})]),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.2173em","vertical-align":"-0.345em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8723em"}},[s("span",{style:{top:"-2.655em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.07153em"}},"C"),s("span",{class:"mord mathnormal mtight"},"A")])])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.394em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"CG")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.345em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})])])])]),a("，可以利用线性插值分别求出 I 和 J 的插值")],-1),x=s("p",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"I"),s("mo",null,"="),s("mi",null,"l"),s("mi",null,"e"),s("mi",null,"r"),s("mi",null,"p"),s("mo",{stretchy:"false"},"("),s("mi",null,"s"),s("mo",{separator:"true"},","),s("mi",null,"A"),s("mo",{separator:"true"},","),s("mi",null,"B"),s("mo",{stretchy:"false"},")"),s("mo",null,"="),s("mi",null,"A"),s("mo",null,"+"),s("mi",null,"s"),s("mo",{stretchy:"false"},"("),s("mi",null,"B"),s("mo",null,"−"),s("mi",null,"A"),s("mo",{stretchy:"false"},")"),s("mspace",{linebreak:"newline"}),s("mi",null,"J"),s("mo",null,"="),s("mi",null,"l"),s("mi",null,"e"),s("mi",null,"r"),s("mi",null,"p"),s("mo",{stretchy:"false"},"("),s("mi",null,"s"),s("mo",{separator:"true"},","),s("mi",null,"C"),s("mo",{separator:"true"},","),s("mi",null,"D"),s("mo",{stretchy:"false"},")"),s("mo",null,"="),s("mi",null,"C"),s("mo",null,"+"),s("mi",null,"s"),s("mo",{stretchy:"false"},"("),s("mi",null,"D"),s("mo",null,"−"),s("mi",null,"C"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"I=lerp(s,A,B)=A+s(B-A)\\\\J=lerp(s,C,D)=C+s(D-C)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.07847em"}},"I"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"er"),s("span",{class:"mord mathnormal"},"p"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"s"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal"},"A"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05017em"}},"B"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7667em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal"},"A"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal"},"s"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05017em"}},"B"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal"},"A"),s("span",{class:"mclose"},")")]),s("span",{class:"mspace newline"}),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.09618em"}},"J"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"er"),s("span",{class:"mord mathnormal"},"p"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"s"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"C"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"D"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7667em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"C"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal"},"s"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"D"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"C"),s("span",{class:"mclose"},")")])])])],-1),z=s("p",null,[a("然后再利用 I 和 J 的插值求出 Q 的插值 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"Q"),s("mo",null,"="),s("mi",null,"l"),s("mi",null,"e"),s("mi",null,"r"),s("mi",null,"p"),s("mo",{stretchy:"false"},"("),s("mi",null,"t"),s("mo",{separator:"true"},","),s("mi",null,"J"),s("mo",{separator:"true"},","),s("mi",null,"I"),s("mo",{stretchy:"false"},")"),s("mo",null,"="),s("mi",null,"J"),s("mo",null,"+"),s("mi",null,"t"),s("mo",{stretchy:"false"},"("),s("mi",null,"I"),s("mo",null,"−"),s("mi",null,"j"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"Q=lerp(t,J,I)=J+t(I-j)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8778em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal"},"Q"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"er"),s("span",{class:"mord mathnormal"},"p"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.09618em"}},"J"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.07847em"}},"I"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7667em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.09618em"}},"J"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.07847em"}},"I"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05724em"}},"j"),s("span",{class:"mclose"},")")])])])],-1),v=l('<figure><img src="https://rocyan.oss-cn-hangzhou.aliyuncs.com/blog/202406261212833.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>还有一种 <strong>Bicubic</strong> 的插值算法，通过一个点附近的 16 个 texel，每 4 个一组利用双线性插值求出 4 个插值，再对这 4 个插值再用一次双线性插值求出最后的结果，这个算法效果更好，但是开销很大。</p><p>三种算法的效果对比如下</p><figure><img src="https://rocyan.oss-cn-hangzhou.aliyuncs.com/blog/202406261212248.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2-2-纹理过大" tabindex="-1"><a class="header-anchor" href="#_2-2-纹理过大" aria-hidden="true">#</a> 2.2 纹理过大</h3><p>当纹理过大时，一个 pixel 可能映射到多个 texel，导致采样频率不足，出现摩尔纹</p><figure><img src="https://rocyan.oss-cn-hangzhou.aliyuncs.com/blog/202406261212052.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>当离 camera 越远时，一个 pixel 会覆盖越多个 texel（不同的像素会有不同的 footprint），也就越来越欠采样。如果只是简单的对多个覆盖的 texel 取均值，那么相邻像素点之间的差距会很大，就会产生摩尔纹。</p><figure><img src="https://rocyan.oss-cn-hangzhou.aliyuncs.com/blog/202406261212960.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',9),_=l('<figure><img src="https://rocyan.oss-cn-hangzhou.aliyuncs.com/blog/202406261212336.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_2-2-1-mipmap" tabindex="-1"><a class="header-anchor" href="#_2-2-1-mipmap" aria-hidden="true">#</a> 2.2.1 Mipmap</h4><p>Mipmap 利用范围查询的方法，速度快，但并不是特别的准确，结果是一个近似值，且只能做正方形的范围查询。其本质就是离线生成多个不同 Level 的纹理，然后通过计算出每个 pixel 所需要使用的 Level，找到对应的 texel。</p><figure><img src="https://rocyan.oss-cn-hangzhou.aliyuncs.com/blog/202406261213255.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>MipMap 相较于原图只增加了三分之一的存储空间。</p><h4 id="计算对应-mipmap-的-level-d" tabindex="-1"><a class="header-anchor" href="#计算对应-mipmap-的-level-d" aria-hidden="true">#</a> 计算对应 Mipmap 的 Level D</h4>',6),w=s("p",null,[a("因为 Mipmap 只能做正方形的范围查询，所以要求出一个 pixel 会覆盖多少个 texel，并将覆盖范围近似成正方形，只需求出正方形的边长 L，其对应的 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"L"),s("mi",null,"e"),s("mi",null,"v"),s("mi",null,"e"),s("mi",null,"l"),s("mtext",null," "),s("mi",null,"D"),s("mo",null,"="),s("mi",null,"l"),s("mi",null,"o"),s("msub",null,[s("mi",null,"g"),s("mn",null,"2")]),s("mi",null,"L")]),s("annotation",{encoding:"application/x-tex"},"Level\\ D = log _2L")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord mathnormal"},"L"),s("span",{class:"mord mathnormal"},"e"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"v"),s("span",{class:"mord mathnormal"},"e"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mspace"}," "),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"D"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mord mathnormal"},"o"),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.0359em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mord mathnormal"},"L")])])]),a("，计算所求的 pixel 与周围的几个 pixel 在纹理空间的距离，取其中的最大值就是 L。")],-1),M=l('<figure><img src="https://rocyan.oss-cn-hangzhou.aliyuncs.com/blog/202406261213798.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>但是 L 并不一定都是 2 的指数倍，所以对应的 D 也不一定是整数，当 D 不是整数时，可以利用三线性插值（Trilinear Interpolation），使最终的结果更加线性</p><figure><img src="https://rocyan.oss-cn-hangzhou.aliyuncs.com/blog/202406261213603.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>但是 Mipmap 会导致图片远处过于模糊</p><figure><img src="https://rocyan.oss-cn-hangzhou.aliyuncs.com/blog/202406261213612.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这是因为 Mipmap 只能做正方形的查询，而实际上 pixel 在纹理空间所形成的覆盖区域并不一定是正方形，有可能是长方形甚至不规则图形</p><figure><img src="https://rocyan.oss-cn-hangzhou.aliyuncs.com/blog/202406261213079.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_2-2-2-ripmap-各向异性过滤-anisotropic-filtering" tabindex="-1"><a class="header-anchor" href="#_2-2-2-ripmap-各向异性过滤-anisotropic-filtering" aria-hidden="true">#</a> 2.2.2 Ripmap / 各向异性过滤（Anisotropic Filtering）</h4><p>各向异性过滤支持长方形的区域，随着层数的增加，最后的额外存储空间趋向于原图的三倍</p><figure><img src="https://rocyan.oss-cn-hangzhou.aliyuncs.com/blog/202406261213740.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>对于不规则的图形，各向异性过滤也无法解决，可以使用 EWA 过滤</p><figure><img src="https://rocyan.oss-cn-hangzhou.aliyuncs.com/blog/202406261213936.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_3-纹理应用" tabindex="-1"><a class="header-anchor" href="#_3-纹理应用" aria-hidden="true">#</a> 3 纹理应用</h2><p>在现代 GPU 中，纹理 = 内存 + 范围查询（滤波）</p><h3 id="_3-1-环境光映射-environment-map" tabindex="-1"><a class="header-anchor" href="#_3-1-环境光映射-environment-map" aria-hidden="true">#</a> 3.1 环境光映射（Environment Map）</h3><p>因为几乎只有观察方向对环境光起到影响，所以各个方向的光源可以用一个球体进行存储。</p><figure><img src="https://rocyan.oss-cn-hangzhou.aliyuncs.com/blog/202406261213366.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>类比地球仪，把它展开，就可以把球面信息转换到平面上，从而得到环境 texture。</p><figure><img src="https://rocyan.oss-cn-hangzhou.aliyuncs.com/blog/202406261213194.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>类比地球仪，在极点存在拉伸和扭曲问题，解决方法就是 Cube Map，在原来球体上取一个包围盒，一个立方体，把环境光的信息存放在立方体上。</p><p><img src="https://rocyan.oss-cn-hangzhou.aliyuncs.com/blog/202406261213375.png" alt="" loading="lazy"><img src="https://rocyan.oss-cn-hangzhou.aliyuncs.com/blog/202406261213220.png" alt="" loading="lazy"></p><p>与球形环境光贴图相比，解决了两极的扭曲问题，计算时需要先找到对应的面在去查询而不是直接根据角度在球面上读取，但是这个计算过程非常快，几乎没什么影响。</p><h3 id="_3-2-凹凸-法线贴图-bump-normal-mapping" tabindex="-1"><a class="header-anchor" href="#_3-2-凹凸-法线贴图-bump-normal-mapping" aria-hidden="true">#</a> 3.2 凹凸 / 法线贴图（Bump / Normal Mapping）</h3><p>纹理处理可以描述颜色之外，还可以定义不同位置的任何属性，可以定义一点的相对高度，这个相对高度指的是先定义一个基础表面，在这个基础表面上沿着法线向上向下变化的偏移量。这样不改变几何，只改变法线，着色后会产生明暗对比，人们的视觉就会认为物体表面有凹凸。</p><figure><img src="https://rocyan.oss-cn-hangzhou.aliyuncs.com/blog/202406261213850.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>给一个像素的法线做个扰动，可以通过高度的变化来求出改变后的法线，下图中黑色的线是原来光滑的平面，黄色的线是扰动后的面，可以通过微分的方法来求改变后的法线。</p><figure><img src="https://rocyan.oss-cn-hangzhou.aliyuncs.com/blog/202406261213118.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>将问题简单为 2D，假设原本表面是一维函数，P 点的法线是 (0, 1)，只要通过微分求出 P 点点切线，切线与法线是垂直的，即点积为 0，最后做个归一化就能得到法线。</p><figure><img src="https://rocyan.oss-cn-hangzhou.aliyuncs.com/blog/202406261213529.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>实际使用是 3D 的，思路类似</p><figure><img src="https://rocyan.oss-cn-hangzhou.aliyuncs.com/blog/202406261214760.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_3-3-位移贴图-displacement-mapping" tabindex="-1"><a class="header-anchor" href="#_3-3-位移贴图-displacement-mapping" aria-hidden="true">#</a> 3.3 位移贴图（Displacement Mapping）</h3><p>位移贴图和凹凸贴图使用的是一样的纹理，输入是一样的，但位移贴图会真的把三角形的顶点做一个位置移动。呈现的效果也是不一样的，如下图左侧凹凸贴图在渲染过程中改变法线，欺骗人们的眼睛，仔细观察会发现表面虽然看起来凹凸不平，凸起的部分也没有阴影，而位移贴图是实际改变了几何体的顶点，凸起部分会有阴影，效果也更加真实。</p><figure><img src="https://rocyan.oss-cn-hangzhou.aliyuncs.com/blog/202406261214119.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_3-4-三维纹理" tabindex="-1"><a class="header-anchor" href="#_3-4-三维纹理" aria-hidden="true">#</a> 3.4 三维纹理</h3><p>三维纹理，定义空间中任意一点的纹理。并没有真正生成纹理的图，而是定义一个三维空间的噪声函数经过各种处理，变成需要的样子。</p><figure><img src="https://rocyan.oss-cn-hangzhou.aliyuncs.com/blog/202406261214028.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_3-5-阴影纹理" tabindex="-1"><a class="header-anchor" href="#_3-5-阴影纹理" aria-hidden="true">#</a> 3.5 阴影纹理</h3><p>阴影是提前计算好的，直接写在 texture 中</p><figure><img src="https://rocyan.oss-cn-hangzhou.aliyuncs.com/blog/202406261214562.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',40);function k(C,L){const n=e("RouterLink");return i(),m("div",null,[o,g,h,u,d,y,f,b,x,z,v,s("p",null,[a("超采样可以解决这个问题，但是开销巨大。超采样类似于"),r(n,{to:"/posts/notes/GAMES101/rasterization2.html"},{default:c(()=>[a("光栅化（抗锯齿与深度测试）")]),_:1}),a("中的第 6.1 节多重采样抗锯齿 MSAA（Multisample Anti-Aliasing），将一个像素分成更多的采样点。")]),_,w,M])}const D=t(p,[["render",k],["__file","shading3.html.vue"]]);export{D as default};
