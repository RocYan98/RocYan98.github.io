import{_ as n,o as s,c as a,f as e}from"./app-71d86839.js";const t={},p=e(`<h1 id="super-net-self-init" tabindex="-1"><a class="header-anchor" href="#super-net-self-init" aria-hidden="true">#</a> super(net, self).<strong>init</strong>()</h1><p>在 PyTorch 中要自己定义一个模型的时候，总会在初始化函数中遇到类似<code>super(net, self).__init__()</code>的代码，比如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">net</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>net<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        
    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实<code>super(net, self).__init__()</code>和<code>super().__init__()</code>是等价的，Python 解释器在执行<code>super().__init__()</code>时会通过<code>__class__</code>变量自动填充当前类和实例，这个特殊语法只能在 Python3 中使用，不能在 Python2 中使用，因此 PyTorch 的教程中大部分都是用的第一种写法，而 Python 的教程更多的都是第二种写法。<code>super().__init__()</code>实际上就等价于<code>nn.Module.__inin__()</code>，本质上就是调用父类的初始化方法，使用<code>super</code>的好处就是不需要显示的写出父类，这样有利于后续维护与更新（比如改变了父类，但是这段代码不用改）。</p><p>顺带提一句，Python 语法规定类里面的方法都必须有一个<code>self</code>参数，表示的是实例本身。</p><p>在使用 PyTorch 构建，我们通常需要自定义模型类并继承 PyTorch 的基础模块类<code>nn.Module</code>。在自定义的模型类中，通常需要在<code>__init__</code>方法中调用<code>super().__init__()</code>，这是为了正确地初始化<code>nn.Module</code>类的内部状态。只有调用了<code>super().__init__()</code>之后，才能创建子模块：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">MyModel</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> input_size<span class="token punctuation">,</span> output_size<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 下面两行代码，交换顺序就会报错</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>linear <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>input_size<span class="token punctuation">,</span> output_size<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>linear<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),o=[p];function c(i,u){return s(),a("div",null,o)}const d=n(t,[["render",c],["__file","super.html.vue"]]);export{d as default};
